/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deliverable from '../model/Deliverable';

/**
* Deliverable service.
* @module api/DeliverableApi
* @version 1.0.0
*/
export default class DeliverableApi {

    /**
    * Constructs a new DeliverableApi. 
    * @alias module:api/DeliverableApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createdeliverable operation.
     * @callback module:api/DeliverableApi~createdeliverableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deliverable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Deliverable} deliverable data to be created
     * @param {module:api/DeliverableApi~createdeliverableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deliverable}
     */
    createdeliverable(deliverable, callback) {
      let postBody = deliverable;
      // verify the required parameter 'deliverable' is set
      if (deliverable === undefined || deliverable === null) {
        throw new Error("Missing the required parameter 'deliverable' when calling createdeliverable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deliverable;
      return this.apiClient.callApi(
        '/deliverable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletedeliverable operation.
     * @callback module:api/DeliverableApi~deletedeliverableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} deliverableId the Id parameter
     * @param {module:api/DeliverableApi~deletedeliverableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletedeliverable(deliverableId, callback) {
      let postBody = null;
      // verify the required parameter 'deliverableId' is set
      if (deliverableId === undefined || deliverableId === null) {
        throw new Error("Missing the required parameter 'deliverableId' when calling deletedeliverable");
      }

      let pathParams = {
        'deliverableId': deliverableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/deliverable/{deliverableId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlldeliverable operation.
     * @callback module:api/DeliverableApi~getAlldeliverableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deliverable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/DeliverableApi~getAlldeliverableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deliverable>}
     */
    getAlldeliverable(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deliverable];
      return this.apiClient.callApi(
        '/deliverable/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getdeliverable operation.
     * @callback module:api/DeliverableApi~getdeliverableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deliverable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} deliverableId the Id parameter
     * @param {module:api/DeliverableApi~getdeliverableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deliverable}
     */
    getdeliverable(deliverableId, callback) {
      let postBody = null;
      // verify the required parameter 'deliverableId' is set
      if (deliverableId === undefined || deliverableId === null) {
        throw new Error("Missing the required parameter 'deliverableId' when calling getdeliverable");
      }

      let pathParams = {
        'deliverableId': deliverableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deliverable;
      return this.apiClient.callApi(
        '/deliverable/{deliverableId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatedeliverable operation.
     * @callback module:api/DeliverableApi~updatedeliverableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deliverable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} deliverableId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Deliverable} opts.deliverable data to be updated
     * @param {module:api/DeliverableApi~updatedeliverableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deliverable}
     */
    updatedeliverable(deliverableId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deliverable'];
      // verify the required parameter 'deliverableId' is set
      if (deliverableId === undefined || deliverableId === null) {
        throw new Error("Missing the required parameter 'deliverableId' when calling updatedeliverable");
      }

      let pathParams = {
        'deliverableId': deliverableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deliverable;
      return this.apiClient.callApi(
        '/deliverable/{deliverableId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
